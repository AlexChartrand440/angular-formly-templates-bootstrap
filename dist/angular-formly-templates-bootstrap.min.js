// angular-formly-templates-bootstrap version 4.0.0 built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò)

!function(o,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("angular"),require("apiCheck"),require("ngFormly")):"function"==typeof define&&define.amd?define(["angular","apiCheck","ngFormly"],t):"object"==typeof exports?exports.ngFormlyTemplatesBootstrap=t(require("angular"),require("apiCheck"),require("ngFormly")):o.ngFormlyTemplatesBootstrap=t(o.angular,o.apiCheck,o.ngFormly)}(this,function(o,t,n){return function(o){function t(e){if(n[e])return n[e].exports;var r=n[e]={exports:{},id:e,loaded:!1};return o[e].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=o,t.c=n,t.p="",t(0)}([function(o,t,n){"use strict";o.exports=n(2)},function(o,t,n){"use strict";var e=n(21);e.version||(e=window.angular),o.exports=e},function(o,t,n){"use strict";var e="formlyBootstrap",r=n(1),i=r.module(e,[n(23)]);i.constant("formlyBootstrapApiCheck",n(22)({output:{prefix:"angular-formly-bootstrap"}})),i.constant("formlyBootstrapVersion","4.0.0"),n(13)(i),n(7)(i),n(5)(i),o.exports=e},function(o,t,n){"use strict";o.exports=function(o){function t(o){var t=n(14);o.templateManipulators.preWrapper.push(function(o,n){return"input"!==n.type||!n.templateOptions.addonLeft&&!n.templateOptions.addonRight?o:t.replace("<formly-transclude></formly-transclude>",o)})}o.run(t),t.$inject=["formlyConfig"]}},function(o){"use strict";o.exports=function(o){function t(o){o.templateManipulators.preWrapper.push(function(o,t,n){if(angular.isDefined(t.templateOptions.description)&&"radio"!==t.type&&"checkbox"!==t.type){var e=document.createElement("div");e.appendChild(angular.element(o)[0]);var r=angular.element(e.querySelectorAll("[ng-model]"));return r?(e.appendChild(angular.element('<p id="'+n.id+'_description"class="help-block"ng-if="to.description">{{to.description}}</p>')[0]),r.attr("aria-describedby",n.id+"_description"),e.innerHTML):o}return o})}o.run(t),t.$inject=["formlyConfig"]}},function(o,t,n){"use strict";var e=function(o){return o&&o.__esModule?o["default"]:o},r=e(n(3)),i=e(n(4));o.exports=function(o){r(o),i(o)}},function(o,t,n){"use strict";o.exports=function(o){function t(o,t){o.setType({name:"checkbox",template:n(15),wrapper:["bootstrapHasError"],validateOptions:function(){t.warn(t.shape({templateOptions:t.shape({label:t.string})}),arguments,{prefix:"checkbox type"})}})}o.config(t),t.$inject=["formlyConfigProvider","formlyBootstrapApiCheck"]}},function(o,t,n){"use strict";o.exports=function(o){n(6)(o),n(9)(o),n(8)(o),n(10)(o),n(11)(o),n(12)(o)}},function(o){"use strict";o.exports=function(o){function t(o){o.setType({name:"input",template:'<input class="form-control" ng-model="model[options.key]">',wrapper:["bootstrapLabel","bootstrapHasError"]})}o.config(t),t.$inject=["formlyConfigProvider"]}},function(o,t,n){"use strict";o.exports=function(o){function t(o,t){o.setType({name:"multiCheckbox",template:n(16),wrapper:["bootstrapLabel","bootstrapHasError"],validateOptions:function(){t.warn(t.shape({templateOptions:t.shape({options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional})}),arguments,{prefix:"multiCheckbox type"})},controller:["$scope",function(o){function t(){o.model[e.key]=[],angular.forEach(o.multiCheckbox.checked,function(t,r){t&&o.model[e.key].push(n.options[r][n.valueProp||"value"])})}var n=o.to,e=o.options;o.multiCheckbox={checked:[],change:t}}]})}o.config(t),t.$inject=["formlyConfigProvider","formlyBootstrapApiCheck"]}},function(o,t,n){"use strict";o.exports=function(o){function t(o,t){o.setType({name:"radio",template:n(17),wrapper:["bootstrapLabel","bootstrapHasError"],validateOptions:function(){t.warn(t.shape({templateOptions:t.shape({options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional})}),arguments,{prefix:"radio type"})}})}o.config(t),t.$inject=["formlyConfigProvider","formlyBootstrapApiCheck"]}},function(o,t,n){"use strict";o.exports=function(o){function t(o,t){o.setType({name:"select",template:n(18),wrapper:["bootstrapLabel","bootstrapHasError"],validateOptions:function(){t.warn(t.shape({templateOptions:t.shape({options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional,groupProp:t.string.optional})}),arguments,{prefix:"select type"})}})}o.config(t),t.$inject=["formlyConfigProvider","formlyBootstrapApiCheck"]}},function(o){"use strict";o.exports=function(o){function t(o,t){o.setType({name:"textarea",template:'<textarea class="form-control" ng-model="model[options.key]"></textarea>',wrapper:["bootstrapLabel","bootstrapHasError"],defaultOptions:{ngModelAttrs:{rows:{attribute:"rows"},cols:{attribute:"cols"}}},validateOptions:function(){t.warn(t.shape({templateOptions:t.shape({rows:t.number.optional,cols:t.number.optional})}),arguments,{prefix:"textarea type"})}})}o.config(t),t.$inject=["formlyConfigProvider","formlyBootstrapApiCheck"]}},function(o,t,n){"use strict";o.exports=function(o){function t(o){o.setWrapper([{name:"bootstrapLabel",template:n(20)},{name:"bootstrapHasError",template:n(19)}])}o.config(t),t.$inject=["formlyConfigProvider"]}},function(o){o.exports='<div ng-class="{\'input-group\': to.addonLeft || to.addonRight}">\n    <div class="input-group-addon" ng-if="to.addonLeft">\n        <i class="{{to.addonLeft.class}}" ng-if="to.addonLeft.class"></i>\n        <span ng-if="to.addonLeft.text">{{to.addonLeft.text}}</span>\n    </div>\n    <formly-transclude></formly-transclude>\n    <div class="input-group-addon" ng-if="to.addonRight">\n        <i class="{{to.addonRight.class}}" ng-if="to.addonRight.class"></i>\n        <span ng-if="to.addonRight.text">{{to.addonRight.text}}</span>\n    </div>\n</div>'},function(o){o.exports='<div class="checkbox">\n	<label>\n		<input type="checkbox"\n           class="formly-field-checkbox"\n		       ng-model="model[options.key]">\n		{{to.label}}\n		{{to.required ? \'*\' : \'\'}}\n	</label>\n</div>\n'},function(o){o.exports='<div class="radio-group">\n  <div ng-repeat="(key, option) in to.options" class="checkbox">\n    <label>\n      <input type="checkbox"\n             id="{{id + \'_\'+ $index}}"\n             ng-model="multiCheckbox.checked[$index]"\n             ng-change="multiCheckbox.change()">\n      {{option[to.labelProp || \'name\']}}\n    </label>\n  </div>\n</div>\n'},function(o){o.exports='<div class="radio-group">\n  <div ng-repeat="(key, option) in to.options" class="radio">\n    <label>\n      <input type="radio"\n             id="{{id + \'_\'+ $index}}"\n             ng-value="option[to.valueProp || \'value\']"\n             ng-model="model[options.key]">\n      {{option[to.labelProp || \'name\']}}\n    </label>\n  </div>\n</div>\n'},function(o){o.exports="<select class=\"form-control\"\n        ng-model=\"model[options.key]\"\n        ng-options=\"option[to.valueProp || 'value'] as option[to.labelProp || 'name'] group by option[to.groupProp || 'group'] for option in to.options\">\n</select>\n"},function(o){o.exports='<div class="form-group" ng-class="{\'has-error\': showError}">\n  <formly-transclude></formly-transclude>\n</div>\n'},function(o){o.exports="<div>\n  <label for=\"{{id}}\" class=\"control-label\">\n    {{to.label}}\n    {{to.required ? '*' : ''}}\n  </label>\n  <formly-transclude></formly-transclude>\n</div>\n"},function(t){t.exports=o},function(o){o.exports=t},function(o){o.exports=n}])});
//# sourceMappingURL=angular-formly-templates-bootstrap.min.js.map